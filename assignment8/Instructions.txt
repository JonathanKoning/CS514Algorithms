Implement and evaluate Ford-Fulkerson algorithm for maximum flow. 
The input is a directed graph with edge capacities, a source node and a sink node. 
The output is the maximum flow and an assignment of flows to edges. 
You will be comparing the two approaches "Fat Pipes" and "Short Pipes" to find augmented paths on Erdos-Renyi graphs.

Graph generation: Test cases would use function generate_seq (from graph_gen.py Download graph_gen.py ) to generate a random graph, which is represented as a Python List of edges (u, v, w), i.e. from u to v with weight w. 
The function generate_seq takes the input of (num_vertices, num_edge, random_seed).

Both capacities and flows are integers. You will compare the two approaches "Fat Pipes" and "Short Pipes" to find augmented flows in the residual network.

Fat pipes (named "Max_Flow_Fat"): In this approach, the augmented flows are computed by finding a path from source to sink (an st-path) in the residual graph that has a maximum capacity. 
The capacity of the path is the minimum (remaining) capacity of any edge (the 'bottleneck') in that path. 
The algorithm works like Dijkstra's algorithm except that it tries to build a maximum capacity path (rather than the shortest path) from the source to sink. 

Short pipes (named "Max_Flow_Short"): A breadth first search in the residual graph which returns the shortest path (i.e., the path with the least number of edges) with non-zero flow.

You can use the following examples to verify that your programs are working.

Examples 1:  Input: (0, 3, [(0,1,1), (0,2,5), (1,2,1), (2,3,2), (1,3,6)])

Explanation: The source node is 0, the sink node is 3; the capacity of edge (0->1) is 1; the capacity of edge (0->2) is 5; etc.

Output: (3, [(0, 1, 1), (0, 2, 2), (1, 3, 1), (2, 3, 2)])

Explanation: "3" is the maximum flow;  [(0, 1, 1), (0, 2, 2), (1, 3, 1), (2, 3, 2)] is an assignment of flows to edges.

Example 2: Input: (0, 4,  [(0, 1, 2), (0, 3, 6), (1, 2, 3), (1, 3, 8), (1, 4, 5), (2, 4, 7), (3, 4, 9)])

Output: (8, [(0, 1, 2), (0, 3, 6), (1, 4, 2), (3, 4, 6)])